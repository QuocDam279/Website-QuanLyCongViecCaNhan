const Typejob = require('../models/typejob');

// Th√™m m·ªõi
exports.createTypejob = async (req, res) => {
  try {
    const newTypejob = new Typejob({ name: req.body.name });
    const saved = await newTypejob.save();
    res.status(201).json({ message: 'Th√™m typejob th√†nh c√¥ng', data: saved });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi th√™m typejob', error });
  }
};

// L·∫•y danh s√°ch
exports.getTypejob = async (req, res) => {
  try {
    const list = await Typejob.find();
    res.json({ message: 'Danh s√°ch typejob', data: list });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch', error });
  }
};

// S·ª≠a
exports.updateTypejob = async (req, res) => {
  const id = parseInt(req.params.id, 10);
  try {
    const updated = await Typejob.findByIdAndUpdate(id, { name: req.body.name }, { new: true });
    if (!updated) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y typejob' });
    }
    res.json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', data: updated });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t typejob:', error); // üëà Th√™m d√≤ng n√†y
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t typejob', error });
  }
};


// X√≥a
exports.deleteTypejob = async (req, res) => {
  const id = parseInt(req.params.id, 10);
  if (isNaN(id)) {
    return res.status(400).json({ message: 'ID kh√¥ng h·ª£p l·ªá' });
  }

  try {
    const deleted = await Typejob.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y typejob ƒë·ªÉ x√≥a' });
    }
    res.json({ message: 'X√≥a th√†nh c√¥ng', data: deleted });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi x√≥a typejob', error });
  }
};
